/**
 * Gutachtenportalservice API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DocumentMetadataDto } from '../model/document-metadata-dto';
// @ts-ignore
import { DocumentNoteDto } from '../model/document-note-dto';
// @ts-ignore
import { DokumentDto } from '../model/dokument-dto';
// @ts-ignore
import { DokumentListDto } from '../model/dokument-list-dto';
// @ts-ignore
import { ErrorResponseDto } from '../model/error-response-dto';
// @ts-ignore
import { PatchRequest } from '../model/patch-request';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { GutachtenportalConfiguration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class DokumenteApiClient extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: GutachtenportalConfiguration) {
        super(basePath, configuration);
    }

    /**
     * Fügt einem Dokument eine Notiz hinzu
     * @param id The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param documentNoteDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addNoteToDocument(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public addNoteToDocument(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public addNoteToDocument(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public addNoteToDocument(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addNoteToDocument.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling addNoteToDocument.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling addNoteToDocument.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling addNoteToDocument.');
        }
        if (documentNoteDto === null || documentNoteDto === undefined) {
            throw new Error('Required parameter documentNoteDto was null or undefined when calling addNoteToDocument.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/note`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: documentNoteDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt ein einzelnes Dokument zurück
     * @param id The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentById(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DokumentDto>;
    public getDocumentById(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DokumentDto>>;
    public getDocumentById(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DokumentDto>>;
    public getDocumentById(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDocumentById.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling getDocumentById.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling getDocumentById.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling getDocumentById.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DokumentDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt die Metadaten eines Dokumentes zurück
     * @param id The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DocumentMetadataDto>;
    public getDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DocumentMetadataDto>>;
    public getDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DocumentMetadataDto>>;
    public getDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDocumentMetadata.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling getDocumentMetadata.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling getDocumentMetadata.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling getDocumentMetadata.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/metadaten`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DocumentMetadataDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt die Notiz eines Dokumentes zurück
     * @param id The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DocumentNoteDto>;
    public getDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DocumentNoteDto>>;
    public getDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DocumentNoteDto>>;
    public getDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDocumentNote.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling getDocumentNote.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling getDocumentNote.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling getDocumentNote.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/note`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DocumentNoteDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt eine Liste von Dokumenten zurück
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param offset The number of items to skip before starting to collect the result set.
     * @param limit Number of Items to return
     * @param includeData 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDokumente(xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, includeData?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DokumentListDto>;
    public getDokumente(xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, includeData?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DokumentListDto>>;
    public getDokumente(xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, includeData?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DokumentListDto>>;
    public getDokumente(xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, includeData?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling getDokumente.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling getDokumente.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling getDokumente.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>includeData, 'includeData');

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DokumentListDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Aktualisiert die Metadaten eines Dokumentes
     * @param id The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param patchRequest 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public patchDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, patchRequest: PatchRequest, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public patchDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, patchRequest: PatchRequest, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public patchDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, patchRequest: PatchRequest, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public patchDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, patchRequest: PatchRequest, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling patchDocumentMetadata.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling patchDocumentMetadata.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling patchDocumentMetadata.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling patchDocumentMetadata.');
        }
        if (patchRequest === null || patchRequest === undefined) {
            throw new Error('Required parameter patchRequest was null or undefined when calling patchDocumentMetadata.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/metadaten`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('patch', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: patchRequest,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Aktualisiert die Metadaten eines Dokumentes
     * @param id The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param documentMetadataDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentMetadataDto: DocumentMetadataDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentMetadataDto: DocumentMetadataDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentMetadataDto: DocumentMetadataDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateDocumentMetadata(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentMetadataDto: DocumentMetadataDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDocumentMetadata.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling updateDocumentMetadata.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling updateDocumentMetadata.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling updateDocumentMetadata.');
        }
        if (documentMetadataDto === null || documentMetadataDto === undefined) {
            throw new Error('Required parameter documentMetadataDto was null or undefined when calling updateDocumentMetadata.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/metadaten`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: documentMetadataDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Aktualisiert die Notiz zu einem Dokument
     * @param id The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param documentNoteDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public updateDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public updateDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public updateDocumentNote(id: string, xOrgId: string, xUserId: string, xGutachterId: string, documentNoteDto: DocumentNoteDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDocumentNote.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling updateDocumentNote.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling updateDocumentNote.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling updateDocumentNote.');
        }
        if (documentNoteDto === null || documentNoteDto === undefined) {
            throw new Error('Required parameter documentNoteDto was null or undefined when calling updateDocumentNote.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/dokumente/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/note`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: documentNoteDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
