/**
 * Gutachtenportalservice API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DocumentId } from '../model/document-id';
// @ts-ignore
import { DokumentDto } from '../model/dokument-dto';
// @ts-ignore
import { DokumentListDto } from '../model/dokument-list-dto';
// @ts-ignore
import { ErrorResponseDto } from '../model/error-response-dto';
// @ts-ignore
import { GutachtenDto } from '../model/gutachten-dto';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { GutachtenportalConfiguration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class GutachtenApiClient extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: GutachtenportalConfiguration) {
        super(basePath, configuration);
    }

    /**
     * FÃ¼gt ein Dokument als Anhang zum Gutachten hinzu
     * @param id ID des Gutachtenauftrages
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param dokumentDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAssessmentAttachement(id: string, xOrgId: string, xUserId: string, xGutachterId: string, dokumentDto: DokumentDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DocumentId>;
    public addAssessmentAttachement(id: string, xOrgId: string, xUserId: string, xGutachterId: string, dokumentDto: DokumentDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DocumentId>>;
    public addAssessmentAttachement(id: string, xOrgId: string, xUserId: string, xGutachterId: string, dokumentDto: DokumentDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DocumentId>>;
    public addAssessmentAttachement(id: string, xOrgId: string, xUserId: string, xGutachterId: string, dokumentDto: DokumentDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling addAssessmentAttachement.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling addAssessmentAttachement.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling addAssessmentAttachement.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling addAssessmentAttachement.');
        }
        if (dokumentDto === null || dokumentDto === undefined) {
            throw new Error('Required parameter dokumentDto was null or undefined when calling addAssessmentAttachement.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gutachtenauftraege/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/gutachten/anhaenge`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DocumentId>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: dokumentDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Erzeugt ein neues Gutachten zum Auftrag
     * @param id ID des Gutachtenauftrages
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param gutachtenDto 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, gutachtenDto: GutachtenDto, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public createAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, gutachtenDto: GutachtenDto, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public createAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, gutachtenDto: GutachtenDto, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public createAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, gutachtenDto: GutachtenDto, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createAssessment.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling createAssessment.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling createAssessment.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling createAssessment.');
        }
        if (gutachtenDto === null || gutachtenDto === undefined) {
            throw new Error('Required parameter gutachtenDto was null or undefined when calling createAssessment.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gutachtenauftraege/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/gutachten`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('post', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: gutachtenDto,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * LÃ¶scht ein Dokument, welches einem Gutachten angehangen ist
     * @param id ID des Gutachtenauftrages
     * @param documentId The id of the document
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAssessmentAttachement(id: string, documentId: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any>;
    public deleteAssessmentAttachement(id: string, documentId: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<any>>;
    public deleteAssessmentAttachement(id: string, documentId: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<any>>;
    public deleteAssessmentAttachement(id: string, documentId: string, xOrgId: string, xUserId: string, xGutachterId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAssessmentAttachement.');
        }
        if (documentId === null || documentId === undefined) {
            throw new Error('Required parameter documentId was null or undefined when calling deleteAssessmentAttachement.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling deleteAssessmentAttachement.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling deleteAssessmentAttachement.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling deleteAssessmentAttachement.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gutachtenauftraege/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/gutachten/anhaenge/${this.configuration.encodeParam({name: "documentId", value: documentId, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<any>('delete', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt das Gutachten zurÃ¼ck
     * @param id ID des Gutachtenauftrages
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GutachtenDto>;
    public getAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GutachtenDto>>;
    public getAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GutachtenDto>>;
    public getAssessment(id: string, xOrgId: string, xUserId: string, xGutachterId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAssessment.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling getAssessment.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling getAssessment.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling getAssessment.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gutachtenauftraege/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/gutachten`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<GutachtenDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt die DokumentenanhÃ¤nge eines Gutachtens wieder
     * @param id ID des Gutachtenauftrages
     * @param xOrgId Organisations-Id des Gutachters und des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xUserId User-Id des Gutachters bzw. des Gutachtermitarbeiters - Wird durch API-Gateway gesetzt
     * @param xGutachterId UserId des dem User zugeordneten Gutachters - Wird durch API-Gateway gesetzt
     * @param offset The number of items to skip before starting to collect the result set.
     * @param limit Number of Items to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssessmentAttachements(id: string, xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DokumentListDto>;
    public getAssessmentAttachements(id: string, xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DokumentListDto>>;
    public getAssessmentAttachements(id: string, xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DokumentListDto>>;
    public getAssessmentAttachements(id: string, xOrgId: string, xUserId: string, xGutachterId: string, offset?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAssessmentAttachements.');
        }
        if (xOrgId === null || xOrgId === undefined) {
            throw new Error('Required parameter xOrgId was null or undefined when calling getAssessmentAttachements.');
        }
        if (xUserId === null || xUserId === undefined) {
            throw new Error('Required parameter xUserId was null or undefined when calling getAssessmentAttachements.');
        }
        if (xGutachterId === null || xGutachterId === undefined) {
            throw new Error('Required parameter xGutachterId was null or undefined when calling getAssessmentAttachements.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>offset, 'offset');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>limit, 'limit');

        let localVarHeaders = this.defaultHeaders;
        if (xOrgId !== undefined && xOrgId !== null) {
            localVarHeaders = localVarHeaders.set('X-OrgId', String(xOrgId));
        }
        if (xUserId !== undefined && xUserId !== null) {
            localVarHeaders = localVarHeaders.set('X-UserId', String(xUserId));
        }
        if (xGutachterId !== undefined && xGutachterId !== null) {
            localVarHeaders = localVarHeaders.set('X-GutachterId', String(xGutachterId));
        }

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/gutachtenauftraege/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: "uuid"})}/gutachten/anhaenge`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DokumentListDto>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
