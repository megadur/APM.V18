/**
 * Customer Credit API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CreateorchangestoreconfigurationRequest1 } from '../model/createorchangestoreconfigurationRequest1';
// @ts-ignore
import { Savestoreconfig1 } from '../model/savestoreconfig1';
// @ts-ignore
import { Storeconfig1 } from '../model/storeconfig1';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class StoreConfigurationService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Create or change store configuration
     * Create or change store configuration data.
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param createorchangestoreconfigurationRequest1 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createorchangestoreconfiguration(accept: string, contentType: string, createorchangestoreconfigurationRequest1: CreateorchangestoreconfigurationRequest1, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<Savestoreconfig1>;
    public createorchangestoreconfiguration(accept: string, contentType: string, createorchangestoreconfigurationRequest1: CreateorchangestoreconfigurationRequest1, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Savestoreconfig1>>;
    public createorchangestoreconfiguration(accept: string, contentType: string, createorchangestoreconfigurationRequest1: CreateorchangestoreconfigurationRequest1, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Savestoreconfig1>>;
    public createorchangestoreconfiguration(accept: string, contentType: string, createorchangestoreconfigurationRequest1: CreateorchangestoreconfigurationRequest1, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling createorchangestoreconfiguration.');
        }
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling createorchangestoreconfiguration.');
        }
        if (createorchangestoreconfigurationRequest1 === null || createorchangestoreconfigurationRequest1 === undefined) {
            throw new Error('Required parameter createorchangestoreconfigurationRequest1 was null or undefined when calling createorchangestoreconfiguration.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (accept !== undefined && accept !== null) {
            localVarHeaders = localVarHeaders.set('Accept', String(accept));
        }
        if (contentType !== undefined && contentType !== null) {
            localVarHeaders = localVarHeaders.set('Content-Type', String(contentType));
        }

        // authentication (appKey) required
        localVarHeaders = this.configuration.addCredentialToHeaders('appKey', 'X-VTEX-API-AppKey', localVarHeaders);

        // authentication (appToken) required
        localVarHeaders = this.configuration.addCredentialToHeaders('appToken', 'X-VTEX-API-AppToken', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json; charset=utf-8'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/creditcontrol/storeconfig`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Savestoreconfig1>('put', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: createorchangestoreconfigurationRequest1,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve store configuration
     * Get store configuration data.
     * @param contentType The Media type of the body of the request. Default value for payment provider protocol is application/json
     * @param accept Media type(s) that is/are acceptable for the response. Default value for payment provider protocol is application/json
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrievestoreconfiguration(contentType: string, accept: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<Storeconfig1>;
    public retrievestoreconfiguration(contentType: string, accept: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Storeconfig1>>;
    public retrievestoreconfiguration(contentType: string, accept: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Storeconfig1>>;
    public retrievestoreconfiguration(contentType: string, accept: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json; charset=utf-8', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (contentType === null || contentType === undefined) {
            throw new Error('Required parameter contentType was null or undefined when calling retrievestoreconfiguration.');
        }
        if (accept === null || accept === undefined) {
            throw new Error('Required parameter accept was null or undefined when calling retrievestoreconfiguration.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (contentType !== undefined && contentType !== null) {
            localVarHeaders = localVarHeaders.set('Content-Type', String(contentType));
        }
        if (accept !== undefined && accept !== null) {
            localVarHeaders = localVarHeaders.set('Accept', String(accept));
        }

        // authentication (appKey) required
        localVarHeaders = this.configuration.addCredentialToHeaders('appKey', 'X-VTEX-API-AppKey', localVarHeaders);

        // authentication (appToken) required
        localVarHeaders = this.configuration.addCredentialToHeaders('appToken', 'X-VTEX-API-AppToken', localVarHeaders);

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json; charset=utf-8'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/api/creditcontrol/storeconfig`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<Storeconfig1>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
