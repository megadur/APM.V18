/**
 * CustomerInsightsManagementClient
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { DataSourcePrecedence } from './dataSourcePrecedence';
import { ProfileEnumValidValuesFormat } from './profileEnumValidValuesFormat';


/**
 * Property definition.
 */
export interface PropertyDefinition { 
    /**
     * Array value separator for properties with isArray set.
     */
    arrayValueSeparator?: string;
    /**
     * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
     */
    readonly dataSourcePrecedenceRules?: Array<DataSourcePrecedence>;
    /**
     * Describes valid values for an enum property.
     */
    enumValidValues?: Array<ProfileEnumValidValuesFormat>;
    /**
     * Name of the property.
     */
    fieldName: string;
    /**
     * Type of the property.
     */
    fieldType: string;
    /**
     * Indicates if the property is actually an array of the fieldType above on the data api.
     */
    isArray?: boolean;
    /**
     * Whether property is available in graph or not.
     */
    isAvailableInGraph?: boolean;
    /**
     * Indicates if the property is an enum.
     */
    isEnum?: boolean;
    /**
     * Indicates if the property is an flag enum.
     */
    isFlagEnum?: boolean;
    /**
     * Whether the property is an Image.
     */
    isImage?: boolean;
    /**
     * Whether the property is a localized string.
     */
    isLocalizedString?: boolean;
    /**
     * Whether the property is a name or a part of name.
     */
    isName?: boolean;
    /**
     * Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field.
     */
    isRequired?: boolean;
    /**
     * Max length of string. Used only if type is string.
     */
    maxLength?: number;
    /**
     * The ID associated with the property.
     */
    propertyId?: string;
    /**
     * URL encoded schema.org item prop link for the property.
     */
    schemaItemPropLink?: string;
}

