/**
 * CustomerInsightsManagementClient
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ProvisioningState } from './provisioningState';
import { PropertyDefinition } from './propertyDefinition';
import { StrongId } from './strongId';


/**
 * The profile type definition.
 */
export interface ProfileTypeDefinition { 
    /**
     * The strong IDs.
     */
    strongIds?: Array<StrongId>;
    /**
     * The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object.
     */
    apiEntitySetName?: string;
    /**
     * Type of entity.
     */
    entityType?: ProfileTypeDefinition.EntityTypeEnum;
    /**
     * The properties of the Profile.
     */
    fields?: Array<PropertyDefinition>;
    /**
     * The instance count.
     */
    instancesCount?: number;
    /**
     * The last changed time for the type definition.
     */
    readonly lastChangedUtc?: string;
    provisioningState?: ProvisioningState;
    /**
     * The schema org link. This helps ACI identify and suggest semantic models.
     */
    schemaItemTypeLink?: string;
    /**
     * The hub name.
     */
    readonly tenantId?: string;
    /**
     * The timestamp property name. Represents the time when the interaction or profile update happened.
     */
    timestampFieldName?: string;
    /**
     * The name of the entity.
     */
    typeName?: string;
    /**
     * The attributes for the Type.
     */
    attributes?: { [key: string]: Array<string>; };
    /**
     * Localized descriptions for the property.
     */
    description?: { [key: string]: string; };
    /**
     * Localized display names for the property.
     */
    displayName?: { [key: string]: string; };
    /**
     * Large Image associated with the Property or EntityType.
     */
    largeImage?: string;
    /**
     * Any custom localized attributes for the Type.
     */
    localizedAttributes?: { [key: string]: { [key: string]: string; }; };
    /**
     * Medium Image associated with the Property or EntityType.
     */
    mediumImage?: string;
    /**
     * Small Image associated with the Property or EntityType.
     */
    smallImage?: string;
}
export namespace ProfileTypeDefinition {
    export const EntityTypeEnum = {
        None: 'None',
        Profile: 'Profile',
        Interaction: 'Interaction',
        Relationship: 'Relationship'
    } as const;
    export type EntityTypeEnum = typeof EntityTypeEnum[keyof typeof EntityTypeEnum];
}


